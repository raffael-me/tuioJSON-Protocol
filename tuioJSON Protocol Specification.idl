/**
 * tuioJSON Protocol Specification version 1.0
 * https://github.com/raffael-me/tuioJSON-Protocol
 *
 * Licensed under the MIT license.
 * 
 * This document represents the current state of the tuioJSON Protocol Specification,
 * a uni-directional message exchange format to transmit Touch and Pen related interaction
 * events to Browsers, that do not support Touch and Pen interaction by default.
 * The notation below is a variation of the W3C Interface Definition Language.
 *
 * A tuioJSON Protocol based parser can be found on
 * https://github.com/raffael-me/tuioJSON-Parser
 *  
 * Conventions for all messages:
 *  - all messages are JSON encoded JavaScript objects
 *	- coordinates are percental from 0.0 to 1.0
 *	- attribute names are in Camel Case notation
 */


/**
 * A CoordinateObject is an object that only stores x/y information
 */
interface CoordinateObject {
	readonly attribute float	x;				[0...1.0]
	readonly attribute float	y;				[0...1.0]
};

/**
 * A WordObject is an object that contains both a word and a confidence for this word
 */
interface WordObject {
	readonly attribute string	word;			String
	readonly attribute float	confidence;		[0...1.0]
};


/**
 * A ShapeObject is an object that contains a data representation of a recognized shape
 */
interface ShapeObject {
	readonly attribute string	type;			String
	(...) // corresponding shape attributes
};

/**
 * All tuioJSON messages implement the following structure
 */
interface tuioJSONMessage {

	readonly attribute int		id;				Integer
	readonly attribute string	type;			['touch', 'pen', 'gesture', 'shape', 'handwriting']
	
	{if type==touch}
	readonly attribute string	state;			['start', 'move', 'end']
	readonly attribute float	x;				[0...1.0]
	readonly attribute float	y;				[0...1.0]
	{endif type==touch}

	
	{if type==gesture}
	readonly attribute string	gestureType;	['gesture', 'drag', 'rotate', 'scale']
	readonly attribute string	state;			['start', 'change', 'end']
	{if gestureType==rotate or gestureType==gesture}
	readonly attribute float	rotation;		Float // absolute in degrees where 0 is the rotation at the beginning of the gesture and positive is clockwise
	{endif gestureType==rotate or gestureType==gesture}
	{if gestureType==scale or gestureType==gesture}
	readonly attribute float	scale;			Float // absolute where 1.0 is the scale at the beginning of the gesture
	{endif gestureType==scale or gestureType==gesture}
	{if gestureType==drag}
	readonly attribute float	x;				[0...1.0]
	readonly attribute float	y;				[0...1.0]	
	readonly attribute float	translationX;	[0...1.0]
	readonly attribute float	translationX;	[0...1.0]	
	{else}
	readonly attribute Array	touches;		Array of CoordinateObject	// positions of all current touches on the screen
	readonly attribute float 	*pivotX;		[0...1.0]
	readonly attribute float	*pivotY;		[0...1.0]
	{endif gestureType==drag}
	
	{endif type==gesture}

	
	{if type==pen}
	readonly attribute float	x;				[0...1.0]
	readonly attribute float	y;				[0...1.0]
	readonly attribute string	state;			['start', 'move', 'end']
	{endif type==pen}
	
	{if type==shape}
	readonly attribute Array	shapes;			Array of ShapeObject
	{endif type==shape}
	
	{if type==handwriting}
	readonly attribute string	state;			['processing', 'result']
	readonly attribute float	*x;				[0...1.0] // not final
	readonly attribute float	*y;				[0...1.0] // not final
	{if state==result}
	readonly attribute Array	words;			Array of WordObject
	{endif state==result}
	{endif type==handwriting}
};