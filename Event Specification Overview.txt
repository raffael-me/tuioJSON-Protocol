/**
 * Specified in this document:
 * TouchEvent:UIEvent,
 * GestureEvent:UIEvent,
 * DragEvent:UIEvent,
 * PenEvent:MouseEvent,
 * ShapeEvent:UIEvent,
 * HandwritingEvent:UIEvent
 */


/**
 * @author			Doug Schepers, W3C
 * @author			Sangwhan Moon, Opera Software ASA
 * @author			Matt Brubeck, Mozilla
 * @see				Touch events version 2 (https://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html)
 * @description		A Touch event does not contain coordinate information. This information is embedded in the corresponding Touch lists.
 * @dispatchedAs	touchstart, touchmove, touchend
 */
interface TouchEvent : UIEvent {
    readonly attribute TouchList	touches;
    readonly attribute TouchList	targetTouches;
    readonly attribute TouchList	changedTouches;
    readonly attribute boolean		altKey;
    readonly attribute boolean		metaKey;
    readonly attribute boolean		ctrlKey;
    readonly attribute boolean		shiftKey;
    readonly attribute EventTarget	relatedTarget;
};


/**
 * @author			Raffael Hannemann
 * @description		A Gesture event is triggered as soon multple Touch events happen on the same element. Gesture Events contain both scale and rotation information. Drag events extend Gesture events and can happen with only one active finger on the element.
 * @dispatchedAs	gesturestart, gesturechange, gestureend, rotatestart, rotatechange, rotateend, scalestart, scalechange, scaleend
 */
interface GestureEvent : UIEvent {
    readonly attribute boolean		altKey;
    readonly attribute boolean		metaKey;
    readonly attribute boolean		ctrlKey;
    readonly attribute boolean		shiftKey;
    readonly attribute float		rotation;
    readonly attribute float		scale;
};


/**
 * @author			Raffael Hannemann
 * @description		A Drag event is triggered as soon as multiple Touch events happen on the same element. Gesture Events contain both scale and rotation information
 * @dispatchedAs	dragstart, dragchange, dragend
 */
interface DragEvent : GestureEvent {
    readonly attribute long			translationX;
    readonly attribute long			translationY;
};


/**
 * @author			Raffael Hannemann
 * @description		A Pen event is triggered as soon as a Pen touches the surface. Since multiple Pens might be active at the same time, an identifier is stored to distinguish them.
 * @dispatchedAs	penstart, penmove, penend, mousedown, mousemove, mouseup
 */
interface PenEvent : UIEvent {
	readonly attribute longint		identifier;
    readonly attribute TouchList	touches;
    readonly attribute TouchList	targetTouches;
    readonly attribute TouchList	changedTouches;
    readonly attribute boolean		altKey;
    readonly attribute boolean		metaKey;
    readonly attribute boolean		ctrlKey;
    readonly attribute boolean		shiftKey;
    readonly attribute EventTarget	relatedTarget;
};

/**
 * @author			Raffael Hannemann
 * @description		A SinglePen event is triggered as soon as a Pen touches the surface if SinglePenMode is active. No identifier is required to distinguish them, since only one Pen may be active.
 * @dispatchedAs	penstart, penmove, penend, mousedown, mousemove, mouseup
 */
interface SinglePenEvent : MouseEvent {}

/**
 * @author			Raffael Hannemann
 * @description		A Shape event is triggered as soon as a Pen interaction is interpreted as a shape. Since multiple Pens might be active at the same time, an identifier is stored to distinguish them.
 * @dispatchedAs	penshape
 */
interface ShapeEvent : UIEvent {
    readonly attribute ShapeList	shapes;
};


/**
 * @author			Raffael Hannemann
 * @description		A Handwriting event is triggered as soon as a Pen interaction is interpreted as a shape. Since multiple Pens might be active at the same time, an identifier is stored to distinguish them.
 * @dispatchedAs	handwritingprocessing, handwritingresult
 */
interface HandwritingEvent : UIEvent {
    readonly attribute WordList		words;
};


/**
 * @author			Raffael Hannemann
 * @description		A WordList is a list of Word objects.
 */
interface WordList {
    readonly attribute unsigned long length;
    getter Word  item (unsigned long index);
};

/**
 * @author			Raffael Hannemann
 * @description		A Word is an object containing both a string that represents a recognized word and the corresponding confidence level.
 */
interface Word {
	readonly attribute String	word;
	readonly attribute Float	confidence;
};

/**
 * @author			Raffael Hannemann
 * @description		A ShapeList is a list of Shape objects
 */
interface ShapeList {
	readonly attribute unsigned long length;
	getter Shape  item (unsigned long index);
}

/**
 * @author			Raffael Hannemann
 * @description		A Shape is an object containing both a string to mark the recognized shape and the corresponding confidence level.
 */
interface Shape {
	readonly attribute String	word;
	readonly attribute Float	confidence;
};